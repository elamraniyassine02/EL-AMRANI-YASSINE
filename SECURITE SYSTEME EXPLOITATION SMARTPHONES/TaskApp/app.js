const fs = require('fs');
const bcrypt = require('bcrypt');
const express = require('express');
const { v4: uuidv4 } = require('uuid');

const app = express();
const PORT = 3000;

app.use(express.json());

// Load database.json safely
const loadDatabase = () => {
    try {
        const data = fs.readFileSync('database.json', 'utf8');
        return JSON.parse(data);
    } catch (error) {
        console.error('Error loading database:', error);
        return { users: [], tasks: [] };
    }
};

// Save database.json safely
const saveDatabase = (db) => {
    try {
        fs.writeFileSync('database.json', JSON.stringify(db, null, 4));
    } catch (error) {
        console.error('Error saving database:', error);
    }
};

// Register user with hashed password
app.post('/register', async (req, res) => {
    let { login, password, role } = req.body;
    
    if (!login || !password) {
        return res.status(400).json({ error: 'Username and password are required' });
    }

    if (role !== 'user' && role !== 'admin') {
        role = 'user'; // Default to user if invalid role
    }

    const db = loadDatabase();
    const existingUser = db.users.find(user => user.login === login);

    if (existingUser) {
        return res.status(400).json({ error: 'Username already exists' });
    }

    const hash = await bcrypt.hash(password, 10);
    const newUser = { id: uuidv4(), login, hash, role };

    db.users.push(newUser);
    saveDatabase(db);

    res.status(201).json({ message: 'User registered successfully' });
});

// Login user and verify password
app.post('/login', async (req, res) => {
    const { login, password } = req.body;

    const db = loadDatabase();
    const user = db.users.find(user => user.login === login);

    if (!user) {
        return res.status(401).json({ error: 'Invalid username or password' });
    }

    const isMatch = await bcrypt.compare(password, user.hash);

    if (!isMatch) {
        return res.status(401).json({ error: 'Invalid username or password' });
    }

    res.json({ message: 'Login successful', userID: user.id, role: user.role });
});

// Add new task with user authentication
app.post('/tasks', (req, res) => {
    const { task, userID } = req.body;

    if (!task || !userID) {
        return res.status(400).json({ error: 'Task and user ID are required' });
    }

    const db = loadDatabase();
    const user = db.users.find(user => user.id === userID);

    if (!user) {
        return res.status(403).json({ error: 'Invalid user ID' });
    }

    const newTask = { id: Date.now(), task, userID };
    db.tasks.push(newTask);
    saveDatabase(db);

    res.status(201).json({ message: 'Task added successfully' });
});

// Get all tasks for a specific user
app.get('/tasks/:userID', (req, res) => {
    const { userID } = req.params;
    
    const db = loadDatabase();
    const user = db.users.find(user => user.id === userID);

    if (!user) {
        return res.status(403).json({ error: 'Invalid user ID' });
    }

    const userTasks = db.tasks.filter(task => task.userID === userID);
    res.json(userTasks);
});

// Delete task with ownership validation
app.delete('/tasks/:taskID/:userID', (req, res) => {
    const { taskID, userID } = req.params;
    
    const db = loadDatabase();
    const user = db.users.find(user => user.id === userID);

    if (!user) {
        return res.status(403).json({ error: 'Invalid user ID' });
    }

    const taskIndex = db.tasks.findIndex(task => task.id == taskID && task.userID === userID);

    if (taskIndex === -1) {
        return res.status(404).json({ error: 'Task not found or unauthorized' });
    }

    db.tasks.splice(taskIndex, 1);
    saveDatabase(db);

    res.json({ message: 'Task deleted successfully' });
});

// Admin can delete any task
app.delete('/admin/tasks/:taskID/:adminID', (req, res) => {
    const { taskID, adminID } = req.params;
    
    const db = loadDatabase();
    const admin = db.users.find(user => user.id === adminID && user.role === 'admin');

    if (!admin) {
        return res.status(403).json({ error: 'Unauthorized' });
    }

    const taskIndex = db.tasks.findIndex(task => task.id == taskID);

    if (taskIndex === -1) {
        return res.status(404).json({ error: 'Task not found' });
    }

    db.tasks.splice(taskIndex, 1);
    saveDatabase(db);

    res.json({ message: 'Admin deleted the task successfully' });
});

// Start the server
app.listen(PORT, () => {
    console.log(`Server running on http://localhost:${PORT}`);
});
